NN,NN__activation,NN__alpha,NN__batch_size,NN__beta_1,NN__beta_2,NN__early_stopping,NN__epsilon,NN__hidden_layer_sizes,NN__learning_rate,NN__learning_rate_init,NN__max_iter,NN__momentum,NN__nesterovs_momentum,NN__power_t,NN__random_state,NN__shuffle,NN__solver,NN__tol,NN__validation_fraction,NN__verbose,NN__warm_start,memory,rp,rp__dense_output,rp__density,rp__eps,rp__n_components,rp__random_state,steps
"MLPClassifier(activation='relu', alpha=1.0, batch_size='auto', beta_1=0.9,
       beta_2=0.999, early_stopping=True, epsilon=1e-08,
       hidden_layer_sizes=(82,), learning_rate='constant',
       learning_rate_init=0.064, max_iter=2000, momentum=0.9,
       nesterovs_momentum=True, power_t=0.5, random_state=3, shuffle=True,
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=False,
       warm_start=False)",relu,1.0,auto,0.9,0.999,True,1e-08,"(82,)",constant,0.064,2000,0.9,True,0.5,3,True,adam,0.0001,0.1,False,False,,"SparseRandomProjection(dense_output=False, density='auto', eps=0.1,
            n_components=12, random_state=3)",False,auto,0.1,12,3,"[('rp', SparseRandomProjection(dense_output=False, density='auto', eps=0.1,
            n_components=12, random_state=3)), ('NN', MLPClassifier(activation='relu', alpha=1.0, batch_size='auto', beta_1=0.9,
       beta_2=0.999, early_stopping=True, epsilon=1e-08,
       hidden_layer_sizes=(82,), learning_rate='constant',
       learning_rate_init=0.064, max_iter=2000, momentum=0.9,
       nesterovs_momentum=True, power_t=0.5, random_state=3, shuffle=True,
       solver='adam', tol=0.0001, validation_fraction=0.1, verbose=False,
       warm_start=False))]"
